#   
#
# 

.PHONY: all pre_target lib post_target

all: pre_target javacall_common lib post_target 

ifeq ($(JAVACALL_DIR),)
$(error JAVACALL_DIR is not set.)
endif

include $(JAVACALL_DIR)/build/common.gmk

TEMP=$(patsubst %.c,%.o,$(PORTING_SOURCE))
ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(filter-out $(FILTER_OBJECTS),$(TEMP))
else # ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(TEMP)
endif # ifneq ($(FILTER_OBJECTS)x,x)

ifneq ($(UTILITIES)x, x)
UTILITY_OBJECTS=$(addsuffix .o,$(UTILITIES))
endif

PROPERTY_OBJECTS=$(addsuffix .o,$(PROPERTY_FILES))

lib: $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib

ifeq ($(ENABLE_THUMB), true)
CC=tcc
CXX=tcpp
else
CC=armcc
CXX=armcc
endif

LOCAL_CFLAGS_debug = -g -O0 -D_DEBUG
LOCAL_CFLAGS_nodebug = -O3

ifeq ($(ENABLE_THUMB), true)
LOCAL_CFLAGS_debug += --apcs=/interwork
LOCAL_CFLAGS_nodebug += --apcs=/interwork
endif

ifeq ($(USE_PROPERTIES_FROM_FS), true)
LOCAL_CFLAGS_$(BUILD) += -DUSE_PROPERTIES_FROM_FS
endif

ifneq ($(findstring CYGWIN, $(shell uname)), CYGWIN)
    define fixcygpath
    echo $(1)
    endef
else
    define fixcygpath
    echo $(1) | xargs -n1 cygpath -m
    endef
endif

CXXFLAGS=-nologo $(LOCAL_CFLAGS_$(BUILD))
CFLAGS= $(LOCAL_CFLAGS_$(BUILD)) $(PLATFORM_EXTRA_CFLAGS) $(PLATFORM_EXTRA_CFLAGS_INC) $(PLATFORM_EXTRA_CFLAGS_DEF) $(PLATFORM_EXTRA_CFLAGS_MISC)
CPPFLAGS+= -I`$(call fixcygpath, $(JAVACALL_OUTPUT_INCLUDE_DIR))`
CPPFLAGS+= $(SPECIFIC_DEFINITIONS)

AR=armar 
ARFLAGS=

OUTPUT_OPTION= -o `$(call fixcygpath, $@)` 

$(JAVACALL_OUTPUT_OBJ_DIR)/%.o: %.cpp
	@echo "...compiling: " $<
	@$(COMPILE.cc) $(OUTPUT_OPTION) `$(call fixcygpath, $<)`

$(JAVACALL_OUTPUT_OBJ_DIR)/%.o: %.c
	@echo "...compiling: " $<
	@$(COMPILE.c) $(OUTPUT_OPTION) `$(call fixcygpath, $<)`	

$(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib: \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PORTING_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(UTILITY_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PROPERTY_OBJECTS)) \
	$(SPECIFIC_OBJECTS)
	@echo "...Generating Library: $@"
	@$(AR) --create `$(call fixcygpath, $@)` $(ARFLAGS) `$(call fixcygpath, $^ $(ADDITIONAL_LIBS))`
