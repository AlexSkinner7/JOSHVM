#
#   
#
# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
# 
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#

# Build configuration for javacall_arm. The build host is a Win32 or Linux PC and
# the build target is a ADS/ARM device.

export ENABLE_SOFT_FLOAT     := true
export ENABLE_SOFT_FLOAT__BY := javacall_arm_rvct.cfg
export ENABLE_FLOAT          := true
export ENABLE_FLOAT__BY      := javacall_arm_rvct.cfg
export ENABLE_ARM_VFP        := false
#export ENABLE_ARM_VFP__BY    := javacall_arm_rvct.cfg
export ENABLE_RVDS	:= true
export ENABLE_RVDS__BY 	:= javacall_arm_rvct.cfg
export ENABLE_COMPILER                  := false
export ENABLE_COMPILER__BY              := javacall_arm_rvct.cfg
export ENABLE_CLDC_111                  := true
export ENABLE_CLDC_111__BY              := javacall_arm_rvct.cfg

MakeDepsMain_javacall     = ADSPlatform

MakeDepsOpts_javacall     = -resolveVpath true



INVALID_JAVACALL_OUTPUT_DIR = (\
echo ===================================================================== ; \
echo JAVACALL_OUTPUT_DIR \(environment or GNUmake variable\) must be set.  ; \
echo Please set it such that it is possible to access                      ; \
echo \$${JAVACALL_OUTPUT_DIR}/inc and \$${JAVACALL_OUTPUT_DIR}/lib         ; \
echo directories.                                                          ; \
echo ===================================================================== )

ifeq ($(JAVACALL_OUTPUT_DIR),)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error JAVACALL_OUTPUT_DIR is not set)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR); then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR} does not point to a directory)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR)/inc; then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR/inc} is not a directory)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR)/lib; then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR/lib} is not a directory)
endif

ifneq ($(findstring CYGWIN, $(shell uname)), CYGWIN)
    define fixcygpath_m
    echo $(1)
    endef
else
    define fixcygpath_m
    echo $(1) | xargs -n1 cygpath -m
    endef
endif



ifeq ($(ADS_LINUX_HOST),true)

    host_os              = linux
    host_compiler        = gcc

    ifneq ($(IsTarget), true)

    ifndef MERGE_SOURCE_FILES
    MERGE_SOURCE_FILES   = true
    endif

    ifndef SOURCE_MERGER_SIZE
    SOURCE_MERGER_SIZE   = 35
    endif

    # Always disable timer thread on 
    export ENABLE_TIMER_THREAD     := false
    export ENABLE_TIMER_THREAD__BY := generic_arm.cfg

    endif

else

    host_os              = win32
    host_compiler        = visCPP

endif

# IMPL_NOTE: don't forget endianess issues on Sparc Solaris
ifeq ($(ENABLE_C_INTERPRETER), true)
 host_arch           = c
else
 host_arch           = i386
endif

# The following two flags tells jvm.make to include the alternative
# platform/compiler makefiles:
#
# $(JVMWorkSpace)/build/ads/alt_platform.make
# $(JVMWorkSpace)/build/ads/alt_compiler.make

ALT_PLATFORM = ads
ALT_COMPILER = ads

ifeq ($(IsLoopGen),true)
    # LoopGen: an .exe that runs on the HOST. It has
    # an ARM assembler loop generator and will generate the ARM
    # assembler loop.
    os_family          = $(host_os)
    arch               = arm
    compiler           = $(host_compiler)
    CPP_DEF_FLAGS      = -DARM -DCROSS_GENERATOR=1 
endif

ifeq ($(IsRomGen),true)
    # RomGem: an .exe that runs on the HOST. It has
    # an i386 assembler or C loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family      = $(host_os)
    arch           = $(host_arch)
    compiler       = $(host_compiler)
    ROM_GEN_FLAGS  =

    ifeq ($(ADS_LINUX_HOST),true)
    LOOP_GEN_ARG   = +GenerateGNUCode +GenerateAssemblyCode
    endif

endif

ifeq ($(IsTarget),true)
export ENABLE_PCSL = true
export ENABLE_PCSL := true
    # target/{cldc_vm.axf, cldc_vm_r.axf, cldc_vm_g.axf}.
    # These are pure STUB/ARM binaries that run on the TARGET.
    os_family = javacall
    arch      = arm
    compiler  = ads

	export skip_link_image := true

    ifeq ($(USE_DEBUG),true)
    BUILD_EXT_javacall=_g
    else
    BUILD_EXT_javacall=
    endif

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc
    JAVACALL_LIB_DIR=$(JAVACALL_OUTPUT_DIR)/lib
	
	CPP_DEF_FLAGS += -I$(JAVACALL_INCLUDE_DIR)
	CPP_DEF_FLAGS += --diag_suppress 177
#	LINK_FLAGS += --no_scanlib
    LINK_FLAGS += `$(call fixcygpath_m, $(JAVACALL_LIB_DIR)/javacall$(BUILD_EXT_javacall).lib)` 
	

    ifndef MERGE_SOURCE_FILES
    MERGE_SOURCE_FILES  = true
    endif

    ifndef SOURCE_MERGER_SIZE
    SOURCE_MERGER_SIZE  = 35
    endif

    ifeq ($(ENABLE_THUMB_VM), true)
    LOOP_GEN_FLAGS += +GenerateThumbInterwork
    endif

    ifeq ($(ENABLE_SOFT_FLOAT), true)
    CPP_DEF_FLAGS +=
    LINK_FLAGS    += 
    endif

    # Always disable timer thread on 
    export ENABLE_TIMER_THREAD     := false
    export ENABLE_TIMER_THREAD__BY := javacall_arm_rvct.cfg
endif
